import java.time.Duration

plugins {
    id 'signing'
    id 'cz.kubacki.nbm' version '1.17.0'
    id 'io.codearte.nexus-staging' version '0.21.1'
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
}

group = 'com.gluonhq.plugin'
version = '2.8.4-SNAPSHOT'

ext.scriptFile = { String fileName ->
    new File(new File(rootDir, 'gradle'), fileName)
}

apply from: scriptFile('compiler-settings.gradle')
int javaVersion = 8

configureJavaCompilers(javaVersion)

String netbeansVersion = 'RELEASE110'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'http://bits.netbeans.org/nexus/content/groups/netbeans' }
    maven { url 'http://bits.netbeans.org/maven2/' }
    maven { url 'https://nexus.gluonhq.com/nexus/content/repositories/releases/' }
    maven { 
        url 'https://nexus.gluonhq.com/nexus/content/repositories/snapshots/'
        credentials {
            username = gluonNexusUsername
            password = gluonNexusPassword
        }
    }
}

def tryGetProperty = {String name, String defaultValue ->
    if (!project.hasProperty(name)) {
        return defaultValue
    }
    return project.property(name)?.toString()
}

clean {
    delete "${rootDir}/sandbox"
}

compileJava {
    String resDirsPath = sourceSets.main.resources.srcDirs.collect({ it.path }).join(File.pathSeparator)
    options.compilerArgs = ['-Xlint', '-sourcepath', resDirsPath]
}

nbm {
    moduleName = 'com.gluon.plugin.netbeans'
    localizingBundle = 'com/gluonhq/plugin/netbeans/Bundle.properties'
    licenseFile = "${project.rootDir}/license.txt"

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    // TODO: Uncomment once signing key is available
    /*if (isReleaseVersion) {
        keyStore {
            keyStoreFile = file('keystore')
            username = 'gluon'
            password = tryGetProperty('gluonPluginKeyStorePass', '')
        }
    }*/
}

task nbmRelease(type: Copy) {
    dependsOn 'nbm'
    from "$buildDir/nbm"
    into "$buildDir/libs"
    rename "com-gluon-plugin-netbeans.nbm", "com-gluon-plugin-netbeans-${project.version}.nbm"
}

def netbeansModule = { String groupName, String moduleName ->
    [
        group: groupName,
        name: moduleName,
        version: netbeansVersion
    ]
}

def netbeansApi = { String moduleName ->
    netbeansModule('org.netbeans.api', moduleName)
}

dependencies {
    providedCompile netbeansApi('org-netbeans-api-progress')
    providedCompile netbeansApi('org-netbeans-modules-autoupdate-services')
    providedCompile netbeansApi('org-netbeans-modules-options-api')
    providedCompile netbeansApi('org-netbeans-modules-projectapi')
    providedCompile netbeansApi('org-netbeans-modules-projectuiapi')
    providedCompile netbeansApi('org-netbeans-modules-editor-lib2')
    providedCompile netbeansApi('org-netbeans-modules-editor-mimelookup')
    providedCompile netbeansApi('org-netbeans-modules-java-source')
    providedCompile netbeansApi('org-netbeans-modules-gradle-java')
    providedCompile netbeansApi('org-netbeans-libs-javacapi')
    providedCompile netbeansApi('org-openide-awt')
    providedCompile netbeansApi('org-openide-dialogs')
    providedCompile netbeansApi('org-openide-filesystems')
    providedCompile netbeansApi('org-openide-loaders')
    providedCompile netbeansApi('org-openide-modules')
    providedCompile netbeansApi('org-openide-nodes')
    providedCompile netbeansApi('org-openide-util')
    providedCompile netbeansApi('org-openide-util-lookup')
    providedCompile files(findToolsJar(javaVersion))

    compile 'com.gluonhq:ide-plugin-templates:2.10.4-SNAPSHOT'
    compile 'org.apache.logging.log4j:log4j-1.2-api:2.5'
}

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

// If NetBeans fails to start, click Disable modules and continue, go to plugins,
// and install Gradle. 
// Then check if Gluon plugin is installed but not activated: activate and restart.
// If it wasn't installed, close NB and run the task again

task netBeansRun(type: Exec) {
    doFirst {
        def confFile = project.file("sandbox/testuserdir/etc/netbeans.conf")
        if (!confFile.parentFile.exists()) {
            confFile.parentFile.mkdirs()
            confFile.write "netbeans_extraclusters=\"$project.buildDir/module\""
        }
    }

    workingDir "sandbox"

    def executable = System.getProperty('os.name').toLowerCase().contains('windows') ? 'netbeans.exe' : 'netbeans'
    if (project.hasProperty('netBeansInstallDir')) {
        executable = netBeansInstallDir + executable
    } else {
        logger.warn('netBeansInstallDir property is not specified. Assuming \'netbeans\' executable is on PATH.')
    }
    commandLine executable, '--userdir', "testuserdir"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

def nbmFile = file("$buildDir/libs/com-gluon-plugin-netbeans-${project.version}.nbm")
def nbmArtifact = artifacts.add('archives', nbmFile) {
    type 'nbm'
    builtBy 'nbmRelease'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "${project.group}".replace(".", "-") + "-netbeans"
            from components.java
            artifact sourcesJar
            artifact nbmArtifact
            pom {
                name = 'Gluon Plugin for NetBeans'
                description = ' Gluon Plugin allows developers to create Java applications and their native images targeting Android, iOS, Linux, MacOS and Windows platforms using the same codebase.'
                url = 'https://github.com/gluonhq/ide-plugins'
                licenses {
                    license {
                        name = 'BSD 3-clause "New" or "Revised" license'
                        url = 'https://choosealicense.com/licenses/bsd-3-clause/'
                    }
                }
                developers {
                    developer {
                        name = 'Joeri Sykora'
                        email = 'joeri.sykora@gluonhq.com'
                    }
                    developer {
                        name = 'Abhinay Agarwal'
                        email = 'abhinay.agarwal@gluonhq.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:gluonhq/ide-plugins.git'
                    developerConnection = 'scm:git:ssh://github.com:gluonhq/ide-plugins.git'
                    url = 'https://github.com/gluonhq/ide-plugins'
                }
            }
        }
    }
}

signing {
    required = { gradle.taskGraph.hasTask(publish) && !version.endsWith("SNAPSHOT") }
    sign publishing.publications.maven
}

nexusPublishing {
    repositories {
        sonatype()
    }
    // credentials are shared from staging plugin
    clientTimeout = Duration.ofMinutes(5)
    connectTimeout = Duration.ofMinutes(5)
}

nexusStaging {
    username = project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : ''
    password = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : ''
    numberOfRetries = 30
    delayBetweenRetriesInMillis = 5000
}
